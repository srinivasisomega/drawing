<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=900, initial-scale=1.0" />
    <title>Serverless Draw</title>

    <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/css/bootstrap.min.css" />

</head>

<body>

    <style>
        body {
            background-color: #fff;
            margin: 20px;
        }

        #draw-canvas {
            background-color: #ddd;
        }
    </style>

    <div>
        <input type="color" id="color" value="#000000" />
        <input type="button" id="clear" value="Clear" />
    </div>
    <div>
        <canvas id="draw-canvas" height="500" width="800"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@aspnet/signalr@1.1.0/dist/browser/signalr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/msgpack5@4.2.1/dist/msgpack5.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@aspnet/signalr-protocol-msgpack@1.1.0/dist/browser/signalr-protocol-msgpack.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@0.18.0/dist/axios.min.js"></script>
    <script src="app.js"></script>
</body>
<script>
    const clientId = Math.random().toString(36).substring(2);
    const apiBaseUrl = "http://localhost:7249";

    const connection = new signalR.HubConnectionBuilder()
        .withUrl(`${apiBaseUrl}/api`)
        .build();

    connection.on("newStrokes", drawStrokes);
    connection.on("clearCanvas", clearCanvas);

    connection.start().catch(err => console.error(err));

    const canvas = document.getElementById("draw-canvas");
    const ctx = canvas.getContext("2d");
    ctx.lineWidth = 4;

    const colorPicker = document.getElementById("color");
    const clearButton = document.getElementById("clear");

    clearButton.addEventListener("click", async () => {
        if (confirm("Clear everyone's canvas?")) {
            await axios.post(`${apiBaseUrl}/api/clear`);
        }
    });

    let penDown = false;
    let previous = { x: 0, y: 0 };

    canvas.addEventListener("mousedown", () => (penDown = true));
    canvas.addEventListener("mouseup", () => (penDown = false));
    canvas.addEventListener("mousemove", async (ev) => {
        if (!penDown) return;

        const start = { x: previous.x, y: previous.y };
        const end = { x: ev.offsetX, y: ev.offsetY };

        drawStroke(start, end, colorPicker.value);
        previous = { x: ev.offsetX, y: ev.offsetY };

        await axios.post(`${apiBaseUrl}/api/orchestrator`, {
            sender: clientId,
            strokes: [{ start, end, color: colorPicker.value }],
        });
    });

    function drawStrokes(strokeCollection) {
        strokeCollection.strokes.forEach(({ start, end, color }) =>
            drawStroke(start, end, color)
        );
    }

    function drawStroke(start, end, color) {
        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(start.x, start.y);
        ctx.lineTo(end.x, end.y);
        ctx.stroke();
    }

    function clearCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

</script>
</html>